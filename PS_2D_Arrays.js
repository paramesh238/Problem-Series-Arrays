// Array Traversing - 1
// ------------------------> direction

let a = [
    [0,1,2],
    [3,4,5],
    [6,7,8]
];
for(let i=0;i<a.length;i++)
{
    for(let j=0;j<a[i].length;j++)
    {
        process.stdout.write("" + a[i][j] + " ");
    }
}
// Output : 
// 0 1 2 3 4 5 6 7 8 

// -----------------------------------------------------------------------------------------------------------------------------------------------------------
//                                                                *     *    *    *   *
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
// Array Traversing - 2
// <------------------------ direction

let a = [
    [0,1,2],
    [3,4,5],
    [6,7,8]
];
for(let i=a.length-1;i>=0;i--)
{
    for(let j=a[i].length-1;j>=0;j--)
    {
        process.stdout.write("" + a[i][j] + " ");
    }
}
// Output :
// 8 7 6 5 4 3 2 1 0
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
//                                                                *     *    *    *   *
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
// Array Traversing - 3
// <-------- 
// <--------
// <--------
let a = [
    [0,1,2],
    [3,4,5],
    [6,7,8]
];
for(let i=0;i<a.length;i++)
{
    for(let j=a[i].length-1;j>=0;j--)
    {
        process.stdout.write("" + a[i][j] + " ");
    }
    process.stdout.write("\n");
}
// Output :
// 2 1 0 
// 5 4 3
// 8 7 6
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
//                                                                *     *    *    *   *
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
// Array Traversing - 4
// Horizontally right to left & Vertically down to up 
// ^ ^ ^
// | | |
// | | |
// | | |

// By Rohan Sharma
let a = [
    [0,1,2],
    [3,4,5],
    [6,7,8]
];
for(let j=a[0].length-1;j>=0;j--)
{
    for(let i=a.length-1;i>=0;i--)
    {
        process.stdout.write("" + a[i][j] + " ");
    }
}

// By KPR [It is working only when n*n matrix only not for m*n matrix]
let a = [
    [0,1,2],
    [3,4,5],
    [6,7,8]
];
for(let i=a.length-1;i>=0;i--)
{
    for(let j=a[i].length-1;j>=0;j--)
    {
        process.stdout.write("" + a[j][i] + " ");
    }
}

// Output :
// 8 5 2 7 4 1 6 3 0
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
//                                                                *     *    *    *   *
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
// Array Traversing - 5
// Horizontally right to left & vertically from up to down (OR) Vertically inversion of 4th type

// By KPR [It is working only when n*n matrix only not for m*n matrix]
let a = [
    [0,1,2],
    [3,4,5],
    [6,7,8]
];
for(let i=a.length-1;i>=0;i--)
{
    for(let j=0;j<a[i].length;j++)
    {
        process.stdout.write("" + a[j][i] + " ");
    }
}
// Output : 
// 2 5 8 1 4 7 0 3 6 
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
//                                                                *     *    *    *   *
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
// Array Traversing - 6
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
//                                                                *     *    *    *   *
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
// Array Traversing - 7
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
//                                                                *     *    *    *   *
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
// Array Traversing - 8
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
//                                                                *     *    *    *   *
// -----------------------------------------------------------------------------------------------------------------------------------------------------------

// Array Multiplication
let r1 = 3,
    c1 = 3;
let r2 = 3,
    c2 = 2;

let a = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
];
let b = [
    [1, 2],
    [2, 1],
    [3, 2],
];

if (c1 != r2) {
    // condition for matrix multiplication
    console.log("Invalid Operation!");
}

let res = [];
for (let i = 0; i < r1; i++) {
    let row = [];
    for (let j = 0; j < c2; j++) {
        row.push(0);
    }
    res.push(row);
}

// let res  = new Array(r1).fill(0).map(()=>new Array(c2).fill(0));

for (let i = 0; i < r1; i++) {
    for (let j = 0; j < c2; j++) {
        for (let k = 0; k < r2; k++) {
            res[i][j] += a[i][k] * b[k][j];
        }
    }
}

console.log(res);

// Output :
// [ [ 14, 10 ], [ 32, 25 ], [ 50, 40 ] ]
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
//                                                                *     *    *    *   *
// -----------------------------------------------------------------------------------------------------------------------------------------------------------

// -----------------------------------------------------------------------------------------------------------------------------------------------------------
//                                                                *     *    *    *   *
// -----------------------------------------------------------------------------------------------------------------------------------------------------------

// -----------------------------------------------------------------------------------------------------------------------------------------------------------
//                                                                *     *    *    *   *
// -----------------------------------------------------------------------------------------------------------------------------------------------------------

// -----------------------------------------------------------------------------------------------------------------------------------------------------------
//                                                                *     *    *    *   *
// -----------------------------------------------------------------------------------------------------------------------------------------------------------

// -----------------------------------------------------------------------------------------------------------------------------------------------------------
//                                                                *     *    *    *   *
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
